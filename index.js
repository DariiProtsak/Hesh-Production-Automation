require('dotenv').config();
const { chromium } = require('playwright');
const fs = require('fs');

// -----------------
// –°–ª–æ–≤–Ω–∏–∫ —Ç–µ–∫—Å—Ç—ñ–≤ (UA + EN)
// -----------------
const dict = {
  email: ["–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞", "Email"],
  password: ["–ü–∞—Ä–æ–ª—å", "Password"],
  inheritAttributes: [
    "–ù–∞—Å–ª—ñ–¥—É–≤–∞—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏",
    "–ù–∞—Å–ª—ñ–¥—É–≤–∞—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏ –≤—ñ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞",
    "Inherit attributes",
    "Inherit attributes from the main production"
  ],
  productionButton: ["–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ", "Production"],
  launch: ["–ó–∞–ø—É—Å–∫", "Launch"],
  launchProduction: ["–ó–∞–ø—É—Å–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞", "Launch production"],
};

// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∑ –º–∞—Å–∏–≤—É —Ç–µ–∫—Å—Ç—ñ–≤
function textSelector(tag, texts) {
  return texts.map(t => `${tag}:has-text("${t}")`).join(", ");
}

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤ –æ–∫—Ä–µ–º—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó
async function runAutomation() {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  try {
    // –í–µ—Å—å –≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤, –∫–ª—ñ–∫—ñ–≤, –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —ñ —Å–∫—Ä—ñ–Ω–∞–º–∏
    await page.goto('https://splem.hesh.app/sign-in', { waitUntil: 'networkidle' });

    const emailInput = page.locator(
      `input[id="${dict.email[0]}"], input[id="${dict.email[1]}"], input[placeholder*="email"], input[placeholder*="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞"]`
    );
    await emailInput.waitFor({ state: 'visible', timeout: 30000 });
    await emailInput.fill(process.env.LOGIN_EMAIL);

    const passwordInput = page.locator(
      `input[id="${dict.password[0]}"], input[id="${dict.password[1]}"], input[placeholder*="password"], input[placeholder*="–ø–∞—Ä–æ–ª—å"]`
    );
    await passwordInput.waitFor({ state: 'visible', timeout: 30000 });
    await passwordInput.fill(process.env.LOGIN_PASSWORD);

    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle', timeout: 30000 }),
      page.click('button[type="submit"]'),
    ]);

    if (page.url().includes('/select-company')) {
      await page.waitForSelector('button:has-text("Splem")', { timeout: 10000 });
      await page.click('button:has-text("Splem")');
      await page.waitForNavigation({ waitUntil: 'networkidle', timeout: 20000 });
    }

    await page.goto('https://splem.hesh.app/production', { waitUntil: 'networkidle' });
    await page.waitForSelector('.actions-panel_select_button__-vGX7', { timeout: 10000 });
    await page.screenshot({ path: 'screenshot.png', fullPage: true });
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ screenshot.png`);
    const selectButton = page.locator('.actions-panel_select_button__-vGX7').first();
    await selectButton.click({ force: true });

    const wrappers = page.locator('.production-checkbox-wrapper_production_wrapper__tF6xz');
    const count = await wrappers.count();
    let selectedCount = 0;

    for (let i = 0; i < count; i++) {
      const wrapper = wrappers.nth(i);
      const isChildMarker = await wrapper.locator(
        dict.inheritAttributes.map(t => `b.production-item_checkbox_title__Rc6Wx:has-text("${t}")`).join(", ")
      ).count();
      if (isChildMarker > 0) continue;

      const statusExists = await wrapper.locator('.status-selector_to_do__mE-UQ').count();
      if (statusExists === 0) continue;

      const checkbox = await wrapper.locator('input.PrivateSwitchBase-input[type="checkbox"]').elementHandle();
      if (!checkbox) continue;

      await page.evaluate(el => el.click(), checkbox);
      const isChecked = await wrapper.locator('input.PrivateSwitchBase-input[type="checkbox"]').isChecked();
      if (isChecked) selectedCount++;
      await page.waitForTimeout(200);
    }

    console.log(`üîç –í–∏–±—Ä–∞–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤: ${selectedCount}`);

    const launchButton = page.locator(
      '#action_items_container div.action-item_action_item__YpJs1.action-item_blue__eS5V2'
    ).first();
    await launchButton.waitFor({ state: 'visible', timeout: 10000 });
    await launchButton.scrollIntoViewIfNeeded();
    await launchButton.click({ force: true });
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å–∫"/"Launch" –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞`);
    await page.screenshot({ path: 'screenshot.png', fullPage: true });
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ screenshot.png`);

    try {
      await page.waitForSelector('div.MuiDialog-root.MuiModal-root', { timeout: 10000 });
    } catch {
      console.log('‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–µ –∑ º—è–≤–∏–ª–æ—Å—å, –Ω—ñ—á–æ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏');
      await browser.close();
      return;
    }

    const modalRoot = page.locator('div.MuiDialog-root.MuiModal-root').first();
    const chipsContainer = modalRoot.locator('div.products-launch-modal-header_chips_container__c2uGd');
    try {
      await chipsContainer.waitFor({ state: 'visible', timeout: 10000 });
    } catch {
      console.log('‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —É –º–æ–¥–∞–ª—Ü—ñ –Ω–µ –∑ º—è–≤–∏–≤—Å—è');
      await browser.close();
      return;
    }

    const productChips = chipsContainer.locator(':scope > div');
    const chipCount = await productChips.count();
    console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${chipCount} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –º–æ–¥–∞–ª—Ü—ñ`);
    let childProcessedCount = 0;

    for (let i = 0; i < chipCount; i++) {
      const chip = productChips.nth(i);
      await chip.click({ timeout: 3000 }).catch(() => console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç ${i + 1}`));
      await page.waitForTimeout(1000);

      const containers = modalRoot.locator('.production-item_container__GANbW');
      const containersCount = await containers.count();

      let hasParentContainers = false;
      let childContainers = [];

      for (let j = 0; j < containersCount; j++) {
        const container = containers.nth(j);
        const isChild = (await container.locator(
          dict.inheritAttributes.map(t => `b.production-item_checkbox_title__Rc6Wx:has-text("${t}")`).join(", ")
        ).count()) > 0;

        if (isChild) {
          childContainers.push(j);
        } else {
          hasParentContainers = true;
        }
      }

      console.log(`üìä –ü—Ä–æ–¥—É–∫—Ç ${i + 1}: –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö - ${hasParentContainers ? '—Ç–∞–∫' : '–Ω—ñ'}, –¥–æ—á—ñ—Ä–Ω–∏—Ö - ${childContainers.length}`);

      if (hasParentContainers && childContainers.length > 0) {
        console.log(`üéØ –û–±—Ä–æ–±–ª—è—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ (–±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)`);

        for (const childIndex of childContainers) {
          const container = containers.nth(childIndex);
          const prodButtons = container.locator(textSelector("button", dict.productionButton));

          if ((await prodButtons.count()) === 0) continue;

          await prodButtons.first().click({ force: true, timeout: 3000 });
          childProcessedCount++;
          console.log(`‚úÖ –ö–ª—ñ–∫–Ω—É—Ç–æ "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ" –¥–ª—è –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${childIndex + 1}`);
          await page.waitForTimeout(200);
        }
      } else if (!hasParentContainers && childContainers.length > 0) {
        console.log(`‚è≠Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–æ—á—ñ—Ä–Ω—ñ –±–µ–∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      } else if (hasParentContainers && childContainers.length === 0) {
        console.log(`‚è≠Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      } else {
        console.log(`‚ùì –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç—É ${i + 1} - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      }

      await page.waitForTimeout(700);
    }

    console.log(`üéØ –ó–∞–≥–∞–ª–æ–º –æ–±—Ä–æ–±–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: ${childProcessedCount}`);

    const modalLaunchButton = modalRoot.locator(
      textSelector("button.products-launch-modal-footer_launchButton__Cmg78", dict.launch)
    ).first();

    await page.waitForTimeout(500);
    await modalLaunchButton.scrollIntoViewIfNeeded();
    await modalLaunchButton.click({ force: true });
    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å–∫"/"Launch" —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞`);

    try {
      const productLaunchButton = page.locator(
        textSelector("button", dict.launchProduction)
      ).first();
      await productLaunchButton.scrollIntoViewIfNeeded();
      await productLaunchButton.click({ force: true });
      console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞"/"Launch production" –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞`);
    } catch {
      console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–ó–∞–ø—É—Å–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞"/"Launch production"`);
    }

    await page.screenshot({ path: 'screenshot.png', fullPage: true });
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ screenshot.png`);

    const timestamp = new Date().toISOString();
    fs.appendFileSync('log.txt', `‚úÖ –ó–∞–ø—É—â–µ–Ω–æ ${selectedCount} –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ ${childProcessedCount} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –æ ${timestamp}\n`);

  } catch (error) {
    const timestamp = new Date().toISOString();
    fs.appendFileSync('log.txt', `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ ${timestamp}: ${error.message}\n`);
    console.error(error);
  } finally {
    await browser.close();
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–º —Ü–∏–∫–ª–æ–º —Ç–∞ –ø–∞—É–∑–æ—é
(async () => {
  while (true) {
    try {
      await runAutomation();
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó:', err);
    }
    // –ü–∞—É–∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø—É—Å–∫–æ–º
    await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
  }
})();
